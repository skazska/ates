version: "3.7"

services:
  postgresql:
    image: postgres:14-alpine
    container_name: 'postgresql'
    env_file:
      - envs/postgresql.env
    networks:
      - ates-network
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "test", "-d", "test" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.4.0
    hostname: kafka
    restart: always
    env_file:
      - ./envs/kafka.env
    networks:
      - ates-network
    ports:
      - "9093:9093"
    healthcheck:
      test: [ "CMD", "bash", "-c", "unset", "JMX_PORT", ";", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server", "127.0.0.1:9002", "--list" ]
      interval: 10s
      start_period: 10s
      timeout: 2s
      retries: 15

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - ates-network
    ports:
      - "8090:8080"

#  auth-prepare:
#    build:
#      context: ../../services/auth
#      dockerfile: Dockerfile
#      target: prepare
#    env_file:
#      - envs/auth.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network

#  employees-prepare:
#    build:
#      context: ../../services/employees
#      dockerfile: Dockerfile
#      target: prepare
#    env_file:
#      - envs/employees.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network

#  tasks-prepare:
#    build:
#      context: ../../services/tasks
#      dockerfile: Dockerfile
#      target: prepare
#    env_file:
#      - envs/tasks.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network

#  auth:
#    build:
#      context: ../../services/auth
#      dockerfile: Dockerfile
#      target: app
#    container_name: 'auth'
#    env_file:
#      - envs/auth.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#      auth-prepare:
#        condition: service_completed_successfully
#      employees:
#        condition: service_healthy
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network
#    ports:
#      - "8080:8080"
#    healthcheck:
#      test: wget --no-verbose --timeout=2 --spider http://localhost:8080/check/health || exit 1
#      interval: 5s
#      retries: 10
#      start_period: 10s
#      timeout: 3s
#
#  employees:
#    build:
#      context: ../../services/employees
#      dockerfile: Dockerfile
#      target: app
#    container_name: 'employees'
#    env_file:
#      - envs/employees.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#      employees-prepare:
#        condition: service_completed_successfully
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network
#    healthcheck:
#      test: wget --no-verbose --timeout=2 --spider http://localhost:8080/check/health || exit 1
#      interval: 5s
#      retries: 10
#      start_period: 10s
#      timeout: 3s
#    ports:
#      - "8081:8080"
#
#  tasks:
#    build:
#      context: ../../services/tasks
#      dockerfile: Dockerfile
#      target: app
#    container_name: 'tasks'
#    env_file:
#      - envs/tasks.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#      employees:
#        condition: service_healthy
#      tasks-prepare:
#        condition: service_completed_successfully
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network
#    healthcheck:
#      test: wget --no-verbose --timeout=2 --spider http://localhost:8080/check/health || exit 1
#      interval: 5s
#      retries: 10
#      start_period: 10s
#      timeout: 3s
#    ports:
#      - "8082:8080"





#  service-template-prepare:
#    build:
#      context: ../../services/service-template
#      dockerfile: Dockerfile
#      target: prepare
#    env_file:
#      - envs/service-template.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network
#
#  service-template:
#    build:
#      context: ../../services/service-template
#      dockerfile: Dockerfile
#      target: app
#    env_file:
#      - envs/service-template.env
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#      service-template-prepare:
#        condition: service_completed_successfully
#    tmpfs:
#      - /tmp
#    volumes:
#      - npm:/home/node/.npm
#    networks:
#      - ates-network
#    healthcheck:
#      test: wget --no-verbose --timeout=2 --spider http://localhost:8080/check/health || exit 1
#      interval: 5s
#      retries: 10
#      start_period: 10s
#      timeout: 3s

networks:
  ates-network:
    driver: bridge

volumes:
  npm:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ~/.npm

